package uz.momoit.lms.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CourseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseAllPropertiesEquals(Course expected, Course actual) {
        assertCourseAutoGeneratedPropertiesEquals(expected, actual);
        assertCourseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseAllUpdatablePropertiesEquals(Course expected, Course actual) {
        assertCourseUpdatableFieldsEquals(expected, actual);
        assertCourseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseAutoGeneratedPropertiesEquals(Course expected, Course actual) {
        assertThat(expected)
            .as("Verify Course auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseUpdatableFieldsEquals(Course expected, Course actual) {
        assertThat(expected)
            .as("Verify Course relevant properties")
            .satisfies(e -> assertThat(e.getCourseName()).as("check courseName").isEqualTo(actual.getCourseName()))
            .satisfies(e -> assertThat(e.getCourseCode()).as("check courseCode").isEqualTo(actual.getCourseCode()))
            .satisfies(e -> assertThat(e.getCourseImagePath()).as("check courseImagePath").isEqualTo(actual.getCourseImagePath()))
            .satisfies(e -> assertThat(e.getCourseStartDate()).as("check courseStartDate").isEqualTo(actual.getCourseStartDate()))
            .satisfies(e -> assertThat(e.getCourseEndDate()).as("check courseEndDate").isEqualTo(actual.getCourseEndDate()))
            .satisfies(e -> assertThat(e.getCourseFormat()).as("check courseFormat").isEqualTo(actual.getCourseFormat()))
            .satisfies(e -> assertThat(e.getPublished()).as("check published").isEqualTo(actual.getPublished()))
            .satisfies(e -> assertThat(e.getSelfEnrollment()).as("check selfEnrollment").isEqualTo(actual.getSelfEnrollment()))
            .satisfies(e -> assertThat(e.getSelfEnrollmentCode()).as("check selfEnrollmentCode").isEqualTo(actual.getSelfEnrollmentCode()))
            .satisfies(e -> assertThat(e.getStorageQuota()).as("check storageQuota").isEqualTo(actual.getStorageQuota()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseUpdatableRelationshipsEquals(Course expected, Course actual) {
        assertThat(expected)
            .as("Verify Course relationships")
            .satisfies(e -> assertThat(e.getAccount()).as("check account").isEqualTo(actual.getAccount()));
    }
}
