package uz.momoit.lms.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AccountsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsAllPropertiesEquals(Accounts expected, Accounts actual) {
        assertAccountsAutoGeneratedPropertiesEquals(expected, actual);
        assertAccountsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsAllUpdatablePropertiesEquals(Accounts expected, Accounts actual) {
        assertAccountsUpdatableFieldsEquals(expected, actual);
        assertAccountsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsAutoGeneratedPropertiesEquals(Accounts expected, Accounts actual) {
        assertThat(expected)
            .as("Verify Accounts auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsUpdatableFieldsEquals(Accounts expected, Accounts actual) {
        assertThat(expected)
            .as("Verify Accounts relevant properties")
            .satisfies(e -> assertThat(e.getUsername()).as("check username").isEqualTo(actual.getUsername()))
            .satisfies(e -> assertThat(e.getFullName()).as("check fullName").isEqualTo(actual.getFullName()))
            .satisfies(e -> assertThat(e.getSortableName()).as("check sortableName").isEqualTo(actual.getSortableName()))
            .satisfies(e -> assertThat(e.getAvatarImageUrl()).as("check avatarImageUrl").isEqualTo(actual.getAvatarImageUrl()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getLocale()).as("check locale").isEqualTo(actual.getLocale()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getUserType()).as("check userType").isEqualTo(actual.getUserType()))
            .satisfies(e -> assertThat(e.getUserStatus()).as("check userStatus").isEqualTo(actual.getUserStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsUpdatableRelationshipsEquals(Accounts expected, Accounts actual) {}
}
