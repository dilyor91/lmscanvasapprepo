package uz.momoit.lms.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EnrollmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentAllPropertiesEquals(Enrollment expected, Enrollment actual) {
        assertEnrollmentAutoGeneratedPropertiesEquals(expected, actual);
        assertEnrollmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentAllUpdatablePropertiesEquals(Enrollment expected, Enrollment actual) {
        assertEnrollmentUpdatableFieldsEquals(expected, actual);
        assertEnrollmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentAutoGeneratedPropertiesEquals(Enrollment expected, Enrollment actual) {
        assertThat(expected)
            .as("Verify Enrollment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentUpdatableFieldsEquals(Enrollment expected, Enrollment actual) {
        assertThat(expected)
            .as("Verify Enrollment relevant properties")
            .satisfies(e -> assertThat(e.getEnrollmentStatus()).as("check enrollmentStatus").isEqualTo(actual.getEnrollmentStatus()))
            .satisfies(e -> assertThat(e.getLastActivityAt()).as("check lastActivityAt").isEqualTo(actual.getLastActivityAt()))
            .satisfies(e -> assertThat(e.getEnrollmentStartAt()).as("check enrollmentStartAt").isEqualTo(actual.getEnrollmentStartAt()))
            .satisfies(e -> assertThat(e.getEnrollmentEndAt()).as("check enrollmentEndAt").isEqualTo(actual.getEnrollmentEndAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentUpdatableRelationshipsEquals(Enrollment expected, Enrollment actual) {
        assertThat(expected)
            .as("Verify Enrollment relationships")
            .satisfies(e -> assertThat(e.getAccount()).as("check account").isEqualTo(actual.getAccount()))
            .satisfies(e -> assertThat(e.getCourseSection()).as("check courseSection").isEqualTo(actual.getCourseSection()))
            .satisfies(e -> assertThat(e.getCourse()).as("check course").isEqualTo(actual.getCourse()));
    }
}
